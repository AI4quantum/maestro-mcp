name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: ./test.sh all

      - name: Run linter
        run: ./lint.sh --skip-security

      - name: Build
        run: ./build.sh

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build for multiple platforms
        run: |
          # Create release directory
          mkdir -p release
          
          # Build for different platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-X github.com/maximilien/maestro-mcp/src/pkg/config.Version=$VERSION" -o release/maestro-mcp-linux-amd64 ./src/main.go
          GOOS=linux GOARCH=arm64 go build -ldflags "-X github.com/maximilien/maestro-mcp/src/pkg/config.Version=$VERSION" -o release/maestro-mcp-linux-arm64 ./src/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X github.com/maximilien/maestro-mcp/src/pkg/config.Version=$VERSION" -o release/maestro-mcp-darwin-amd64 ./src/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X github.com/maximilien/maestro-mcp/src/pkg/config.Version=$VERSION" -o release/maestro-mcp-darwin-arm64 ./src/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags "-X github.com/maximilien/maestro-mcp/src/pkg/config.Version=$VERSION" -o release/maestro-mcp-windows-amd64.exe ./src/main.go
          
          # Make binaries executable
          chmod +x release/maestro-mcp-linux-amd64
          chmod +x release/maestro-mcp-linux-arm64
          chmod +x release/maestro-mcp-darwin-amd64
          chmod +x release/maestro-mcp-darwin-arm64

      - name: Create checksums
        run: |
          cd release
          sha256sum * > checksums.txt

      - name: Create release notes
        id: release_notes
        run: |
          # Get changelog from git
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            VERSION_NO_V=${VERSION#v}
            CHANGELOG=$(awk "/^## \[$VERSION_NO_V\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md || echo "No changelog found for version $VERSION")
          else
            CHANGELOG="Release $VERSION"
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's New in $VERSION
          
          $CHANGELOG
          
          ## Downloads
          
          ### Linux
          - **amd64**: \`maestro-mcp-linux-amd64\`
          - **arm64**: \`maestro-mcp-linux-arm64\`
          
          ### macOS
          - **amd64**: \`maestro-mcp-darwin-amd64\`
          - **arm64**: \`maestro-mcp-darwin-arm64\`
          
          ### Windows
          - **amd64**: \`maestro-mcp-windows-amd64.exe\`
          
          ## Installation
          
          1. Download the appropriate binary for your platform
          2. Make it executable: \`chmod +x maestro-mcp-*\`
          3. Run: \`./maestro-mcp-*\`
          
          ## Verification
          
          Verify the integrity of your download using the checksums:
          
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          EOF
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ steps.version.outputs.version }}
          path: release/